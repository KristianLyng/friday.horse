#!/usr/bin/gawk -f
# ascii-friday-horse
# Copyright (C) 2018,2022 Kristian Lyngst√∏l <kly@kly.no>
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
##############################################
#
# This stuff is bad, that you probably don't want to read it.
#
# A few notes:
# - This stuff is horrible at HTTP, it just blindly assumes stuff.
# - It is loosely based on a past project (gawk as a reverse proxy) and I
#   didn't bother cleaning it properly.
# - reply() and synthetic() should be the same, but aren't
# - no sensible logging
# - we depend on connection: close, and can't handle more than a single
#   request at a time. E.g.: we suck.
# - because it was already there, there's cache logic when reading
#   horsy-pics from disk. Bad caching.
# - More pics? Need a manual update.

function say(content) {
	printf "%s", content |& Service
}

function synthetic(status, response, msg) {
	say("HTTP/1.1 " status " " response "\n");
	say("Connection: close\n");
	say("\n");
	say(msg);
}

function reply(msg) {
	say("HTTP/1.1 200 OK\n");
	say("Content-Type: text/plain\n");
	say("Cache-Control: max-age=1, s-maxage=1, must-revalidate, public\n");
	say("Server: GNU AWK " PROCINFO["version"] " (seriously)\n");
	say("Connection: close\n\n");
	say(msg "\n");
}

function get(url) {
	cache[url] = ""
	while ("cat ./"url | getline foo) {
		cache[url] = cache[url] "\n" foo
	}
}

function diff(difft) {
	min=60
	h=3600
	d=86400
	x = difft % min
	str = x " seconds";
	if (difft <= min)
		return str;

	difft = difft - x
	x = difft % h
	str = x/min " minutes, " str;
	if (difft <= h)
		return str;

	difft = difft - x
	x = difft % d
	str = x/h " hours, " str;
	if (difft <= d)
		return str;

	difft = difft - x
	str = (difft / d) " days, " str;
	return str
}

function handle_request() {
	Service |& getline
	url=$2
	request=$1
	etacmd = "date --date=friday +%s"
	etacmd | getline eta
	nowcmd = "date +%s"
	nowcmd | getline now
	close(etacmd)
	close(nowcmd)
	if ((now > eta && now < eta + 3600*24) || index(url,"/plz") > 0) {
		x= 1 + rand() * 21;
		x=int(x)
		fil="/horse-"x
		msg = "FRIDAY! https://friday.horse"fil".jpg\n"
		if (index(url,"hd") > 0) {
			fil=fil"-hd.txt"
		} else {
			fil=fil".txt"
		}
		if (cache[fil]) {
			print "Cache hit: " fil "\n";
		} else {
			print "Cache miss: " fil "\n";
			get(fil);
		}
		msg = msg cache[fil]
	} else {
		msg = "Friday: " diff(eta-now) 
	}

	if (request != "GET") {
		synthetic(413,"Only support GET","We only like GET");
		return;
	}
	reply(msg)
}

BEGIN {
	LINT=1
	port = "8080"
	Service = "/inet/tcp/" port "/0/0"
	do {
		handle_request()
		close(Service)
	} while(1)
}
